use clap::{
  Arg,
  ArgAction,
  Command,
};

pub fn init(envs: (&'static str, &'static str, &'static str)) -> Command {
  let (username, hostname, path) = envs;

  Command::new("docker")
    .subcommand_required(true)
    .subcommand(
      Command::new("env")
        .arg(
          Arg::new("username")
            .long("username")
            .required(true)
            .action(ArgAction::Set)
        )
        .arg(
          Arg::new("hostname")
            .long("hostname")
            .required(true)
            .action(ArgAction::Set)
        )
        .arg(
          Arg::new("path")
            .long("path")
            .required(false)
            .default_value("")
            .action(ArgAction::Set)
        )
    )
    .subcommand(
      Command::new("start")
        .arg(
          Arg::new("username")
            .long("username")
            .required(username.is_empty())
            .default_value(username)
            .action(ArgAction::Set)
        )
        .arg(
          Arg::new("hostname")
            .long("hostname")
            .required(hostname.is_empty())
            .default_value(hostname)
            .action(ArgAction::Set)
        )
        .arg(
          Arg::new("path")
            .long("path")
            .required(path.is_empty())
            .default_value(path)
            .action(ArgAction::Set)
        )
    )
    .subcommand(
      Command::new("stop")
        .arg(
          Arg::new("username")
            .long("username")
            .required(username.is_empty())
            .default_value(username)
            .action(ArgAction::Set)
        )
        .arg(
          Arg::new("hostname")
            .long("hostname")
            .required(hostname.is_empty())
            .default_value(hostname)
            .action(ArgAction::Set)
        )
        .arg(
          Arg::new("path")
            .long("path")
            .required(path.is_empty())
            .default_value(path)
            .action(ArgAction::Set)
        )
    )
}